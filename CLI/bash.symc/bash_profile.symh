#!/usr/bin/env bash

# Run bash_logout on disconnect
exit_session() {
	source "$HOME/.bash_logout"
}
trap exit_session SIGHUP

# Load the shell dotfiles, and then some:
for file in ~/.config/bash/{aliases,exports,functions,prompt}; do
	[ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

# if nix env exits source it
if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
	source "$HOME/.nix-profile/etc/profile.d/nix.sh"
	export LOCALE_ARCHIVE_2_11="$(nix-build --no-out-link "<nixpkgs>" -A glibcLocales)/lib/locale/locale-archive"
	export LOCALE_ARCHIVE_2_27="$(nix-build --no-out-link "<nixpkgs>" -A glibcLocales)/lib/locale/locale-archive"
	export LOCALE_ARCHIVE="/usr/bin/locale"
fi

# Load Bash Completions
if [ -e ~/.config/alacritty/alacritty-completions.bash ]; then
	source ~/.config/alacritty/alacritty-completions.bash
fi

# Enable bash vi mode
#set -o vi

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
	shopt -s "$option" 2>/dev/null
done

# Add tab completion for many Bash commands
if [ -f /etc/bash_completion ]; then
	source /etc/bash_completion
fi

# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &>/dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g
fi

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
#complete -W "NSGlobalDomain" defaults;

# ChromeOS: Set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# Load Dropin Files
if [ -d "$HOME/.bash.d" ]; then
	for file in "$HOME/.bash.d/"*; do
		if [[ $file == *.sh ]]; then
			source "$file"
		fi
	done
else
	mkdir -p "$HOME/.bash.d"
	chmod 700 "$HOME/.bash.d"
fi
